.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BIF 1"
.TH BIF 1 "2014-04-17" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bif \- distributed project management tool
.SH "VERSION"
.IX Header "VERSION"
0.1.0_10 (2014\-04\-17)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  bif COMMAND [...]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bif is a project management tool with a command-line interface. It
tracks tasks and issues using a local database, exchanging updates with
remote databases on demand.
.PP
Bif is particularly useful for distributed software teams as the
underlying data model supports a couple of noteworthy features:
.IP "Offline Operation" 4
.IX Item "Offline Operation"
Many bif actions work offline; you can create and update tasks and
issues while disconnected from the network.
.IP "Inter-project Cooperation" 4
.IX Item "Inter-project Cooperation"
Bif issues (and tasks) can be linked with (or copied to) multiple
projects, mirroring the inter-project relationships that exist in the
real world.
.PP
This document is the bif manual and includes design background,
terminology, general concepts and a complete usage guide.  Those who
are impatient to get started may prefer to begin with one of the
following:
.IP "bif-doc-intro" 4
.IX Item "bif-doc-intro"
A very quick hands-on introduction to bif.
.IP "bif-doc-faq" 4
.IX Item "bif-doc-faq"
A list of common questions and answers.
.IP "bif-doc-index" 4
.IX Item "bif-doc-index"
An overview of every piece of bif documententation for both users and
developers.
.SS "Command Structure"
.IX Subsection "Command Structure"
Bif commands are structured where possible the same way an English
speaker describes actions, verb followed by subject. The entire set of
bif commands and their arguments are listed below:
.PP
.Vb 10
\&    bif doc [COMMAND...]
\&    bif drop ID
\&    bif export PATH... HUB
\&    bif import PATH... HUB
\&    bif init [DIRECTORY]
\&    bif list ITEMS
\&        bif list hubs
\&        bif list issue\-status PATH
\&        bif list issues
\&        bif list project\-status PATH
\&        bif list projects [HUB]
\&        bif list task\-status PATH
\&        bif list tasks
\&        bif list topics
\&    bif log [ID]
\&    bif new ITEM
\&        bif new issue [TITLE...]
\&        bif new project [PATH] [TITLE...]
\&        bif new task [TITLE...]
\&    bif push ID PATH [HUB]
\&    bif register HUB
\&    bif reply ID.UID
\&    bif show ID [HUB]
\&    bif sql [STATEMENT...]
\&    bif sync [ID] [HUB]
\&    bif update ID [STATUS]
\&    bif upgrade [DIRECTORY]
.Ve
.PP
In addition to the above commands a few useful aliases are created by
default:
.PP
.Vb 6
\&    bif l           # bif list topics \-\-status open
\&    bif lt          # bif list tasks \-\-status open
\&    bif lts         # bif list tasks \-\-status stalled
\&    bif li          # bif list issues \-\-status open
\&    bif lis         # bif list issues \-\-status stalled
\&    bif lp          # bif list projects \-\-status active
.Ve
.PP
Reference documents for bif commands have titles like
\&\fIbif-command-name\fR, which can also be displayed by running \f(CW\*(C`bif doc
command name\*(C'\fR.
.SS "Global Options"
.IX Subsection "Global Options"
The following options are common to all commands:
.IP "\-\-debug, \-D" 4
.IX Item "--debug, -D"
Turn on debugging statements, which are included in the \fIstdout\fR
stream.
.IP "\-\-help, \-h" 4
.IX Item "--help, -h"
Print a full usage message and exit. Some arguments and options are
only shown when this option is used; a normal usage/error message may
keep some rarely used options hidden.
.IP "\-\-no\-pager" 4
.IX Item "--no-pager"
Do not pipe a command's output to a pager.
.SS "Command Interaction"
.IX Subsection "Command Interaction"
.IP "Input" 4
.IX Item "Input"
Some arguments and options not supplied on the command line are
prompted for.  An editor based on the \f(CW$EDITOR\fR or \f(CW$VISUAL\fR
environment variables may also be invoked for certain types of input.
.IP "Output" 4
.IX Item "Output"
Normal output is printed to \fIstdout\fR or sometimes paged with
less(1) when \fIstdout\fR is connected to a terminal.  Error messages
are sent to \fIstderr\fR.
.IP "Connectivity" 4
.IX Item "Connectivity"
The only commands that involve network communication are \f(CW\*(C`register\*(C'\fR,
\&\f(CW\*(C`import\*(C'\fR, \f(CW\*(C`export\*(C'\fR, and \f(CW\*(C`sync\*(C'\fR. Everything else is a local action.
.IP "Exit Status" 4
.IX Item "Exit Status"
An exit value of zero indicates success.
.SH "DESIGN BACKGROUND"
.IX Header "DESIGN BACKGROUND"
Communication is a core component of project management.  Email, a
decentralized system, often plays a major role
.PP
a part in fulfilling the communication requirements of projects up to a
certain scale.  Tasks, issues, feature requests and the like can exist
in multiple inboxes as shared conversation topics.  Throughout a
topic's lifetime we want to assign it various kinds of meta-data
(status, priority, due date, etc), but this information must be stored
either in our own memories or using an external tool. It is partly
because of this lack of ability to deal with structured meta-data that
email on its own doesn't do the job.
.PP
Managing data is exactly what relational databases are designed for,
and bif takes advantage of SQLite for this purpose. A database schema
helps ensure the integrity of the data, and relevant and insightful
queries can be created using the full power of the underlying engine.
SQLite gives us fulltime local reporting and data modification \- a
wonderful independence from the network when we need it.
.PP
But a database on its own is also not a tool for communication.  \s-1SQL\s0 in
its various implementations generally provides no built-in
functionality for the efficient exchange of updates between
repositories.  Distributed Version Control Systems (\s-1DVCS\s0) on the other
hand provide a useful model for the efficient tracking and exchange of
updates between repositories. The \s-1DVCS\s0 ability of mapping textual
differences to tree structures unfortunately doesn't translate well to
row-based relational data sets.
.PP
Bif therefore is an attempt at applying some \s-1DVCS\s0 princples to a
standard Create, Retrieve, Update and Delete (\s-1CRUD\s0) database
application. The end goal is a distributed communication system that
carries both conversations and structured meta-data. The finer details
of the advantages and trade-offs with regards the bif design can be
found in bif-doc-design(3).
.SH "TERMINOLOGY"
.IX Header "TERMINOLOGY"
.IP "Repository" 4
.IX Item "Repository"
A repository is simply a configuration file and an SQLite database
inside a directory named \fI.bif\fR. All bif commands find the \*(L"current\*(R"
repository by searching upwards through the file-system for such a
directory. The database contains the history, status and relationships
of a set of topics.  The terms repository and database are often used
interchangeably.
.IP "Topic" 4
.IX Item "Topic"
Topic is is a catch-all term for any task, issue, bug or feature etc
which has a conversation (the history) plus associated meta data
(status). Topics are identified by an integer \s-1ID,\s0 which is unique to
the local repository and/or project. The status associated with topics
are generally not universal, but tied to the context of a particular
project.
.IP "Project" 4
.IX Item "Project"
A project is also considered a topic, but one that comes with some
extra functionality.  The key property of a project is that it is a
container for grouping together other topics and the status they can
have.  Multiple projects can be managed within a repository, and can be
defined hierarchically. Projects are identified by their path (name)
which includes the parent's path.
.IP "Hub" 4
.IX Item "Hub"
A hub is a type of repository that acts as a synchronisation point
around which project activities can be exchanged. You can think of the
term \*(L"hub\*(R" as being synonymous with \*(L"organisation.\*(R" It is usually
located on a remote server and accessed through a ssh(1) tunnel.
Hubs are identified either by their location \s-1URI\s0 or by an alias.
.SH "TUTORIAL"
.IX Header "TUTORIAL"
.SS "Initialization"
.IX Subsection "Initialization"
\fIInitializing A Repository\fR
.IX Subsection "Initializing A Repository"
.PP
A bif repository is created with the \f(CW\*(C`init\*(C'\fR command. The default
location is in the current directory.
.PP
.Vb 3
\&    #!sh
\&    bif init
\&    # Database initialised (v99) in /home/mark/src/bif/.bif/
.Ve
.PP
You do not have to remember this location if you are working in a
subdirectory as it will be found automatically. An initialized
repository always starts out empty; projects must be manually imported
or created.
.PP
\fIInitializing Your Identity\fR
.IX Subsection "Initializing Your Identity"
.PP
Some bif commands record the identity of the person making the change \-
i.e. the owner of the repository.  Rather than ask for this information
each time, the user's name and email address are prompted for the first
time bif init is run.
.SS "Creating Topics"
.IX Subsection "Creating Topics"
\fICreating Projects\fR
.IX Subsection "Creating Projects"
.PP
The \f(CW\*(C`new project\*(C'\fR command asks for a project path (like a name for
identification), a title, and an initial comment.  That information can
be given on the command line if desired, otherwise it will be prompted
for.
.PP
.Vb 2
\&    #!sh
\&    bif new project
\&
\&    # Path: [] todo
\&    # Title: [] Things to do
\&    # An editor is invoked for the comment
.Ve
.PP
Projects can be nested by defining them with a parent path and a \*(L"/\*(R":
.PP
.Vb 2
\&    #!sh
\&    bif new project
\&
\&    # Path: [] todo/today
\&    # Title: [] Things to do today
\&    # An editor is invoked for the comment
.Ve
.PP
Apart from visual organisation, the main impact of having nested
projects is that child projects are included when importing or
exporting. Also, child projects will not be displayed in list commands
if the parent project will not be displayed.
.PP
A project has three different types of status associated with it.
Project status is for the status of the project itself. Task and issue
status is obviously for the status of tasks and issues associated with
the project.  New projects can be created using different status
templates, given specific initial status, or copied/forked from other
projects.  See bif-new-project(1) for details.
.PP
\fICreating Tasks and Issues\fR
.IX Subsection "Creating Tasks and Issues"
.PP
Tasks and issues are created similarly to projects, with a summary and
a comment.  As they exist only in the context of a project they may
also require a project path if more than one project exists in the
repository.
.PP
.Vb 2
\&    #!sh
\&    bif new task
\&
\&    # Project: [todo] todo/today
\&    # Title: Take out the rubbish
\&    # editor invoked \- describe the task in more detail
.Ve
.PP
A task or an issue, like a project, is created with the default status
for that type according to the project. An different initial status can
be set with the \f(CW\*(C`\-\-status\*(C'\fR option:
.PP
.Vb 2
\&    #!sh
\&    bif new issue \-\-status needinfo
\&
\&    # Project: [todo] todo/today
\&    # Title: Don\*(Aqt feel like taking out the rubbish
\&    # editor invoked \- describe the task in more detail
.Ve
.PP
A comment can be provided directly with the \f(CW\*(C`\-\-message\*(C'\fR option if
desired instead of having the editor invoked.
.PP
\fITemplate Projects\fR
.IX Subsection "Template Projects"
.PP
Do you have repeatable projects?
.SS "Retrieving Information"
.IX Subsection "Retrieving Information"
Tasks and issues can be viewed, commented on and updated with the
appropriate commands:
.SS "Updating Topics"
.IX Subsection "Updating Topics"
You can add comments to a topic with the \f(CW\*(C`update\*(C'\fR command.
.PP
.Vb 1
\&    bif update ID [\-\-message MESSAGE]
.Ve
.PP
If the \f(CW\*(C`\-\-message\*(C'\fR option is not used an editor will be invoked.  A
second argument can also be used to change the status of the topic, and
a \f(CW\*(C`\-\-title\*(C'\fR option can be used to modify the topic summary.
.PP
.Vb 1
\&    bif update ID [STATUS] [\-\-title TITLE]
.Ve
.PP
Comments on a topic can also be nested. That is, you can \f(CW\*(C`reply\*(C'\fR to a
previous update (or a previous reply).
.PP
.Vb 1
\&    bif reply UPDATE_ID [\-\-message MESSAGE]
.Ve
.PP
The \f(CW\*(C`UPDATE_ID\*(C'\fR argument is actually a full \f(CW\*(C`ID.UPDATE_ID\*(C'\fR value that
you see with the \f(CW\*(C`log\*(C'\fR command. A \f(CW\*(C`reply\*(C'\fR cannot modify a topics
status or title.
.PP
\fIEditing\fR
.IX Subsection "Editing"
.PP
There is no mechanism for editing available in bif at this time.  Be as
wild in your comments as you like, but as with the rest of the
internet, once your changes have been shared, you most likely can't
alter them or take them back. First rule of commenting is: take a deep
breath first.
.PP
\fIDeletion\fR
.IX Subsection "Deletion"
.PP
Of course, even after taking a deep breath you may anyway make a change
to your repository that you didn't mean to. You are not alone; this
happens to all of us.  As long as you have not already synchronised
your changes with a hub, they can be removed[1].
.PP
The \f(CW\*(C`drop\*(C'\fR command can be used to remove a particular comment, or an
entire topic.
.PP
[1] There is nothing magical or otherwise to stop you from dropping any
change. However you will find that as soon as you re-synchronise with a
hub that has those changes they will return to haunt you like the
undead.
.SS "Collaboration Via A Hub"
.IX Subsection "Collaboration Via A Hub"
So far we have covered local-only operations, which are sufficient for
managing simple, completely self-contained projects.  However the real
value of bif comes from its collaboration capabilities.
.PP
\fIHub Signup/Authentication\fR
.IX Subsection "Hub Signup/Authentication"
.PP
As previously mentioned, a remote repository known as a hub is the
mechanism for exchanging updates with others.  You can either self host
a hub on a server you control, or you can use a commercial provider.
Regardless of who is hosting, the communication with the server is via
ssh, for which you will want your own ssh keypair.
.PP
Read the ssh-keygen(1) manpage for how to create a keypair, and
ssh-copy-id(1) for how to transfer the public key to your own
server.  Commercial providers will probably use another method (such as
the bifhub(1) tool) for transfering the public key during their
signup process.
.PP
\fIRegistering A Hub\fR
.IX Subsection "Registering A Hub"
.PP
The reason for registering with a hub is to obtain the list of projects
hosted there.
.PP
.Vb 2
\&    #!sh
\&    bif register my.org@provider.com
.Ve
.PP
By default the \f(CW\*(C`my.org\*(C'\fR part of the provider address can be used as
the hub name in other commands.  To view the list of projects we give
the hub alias to the \f(CW\*(C`list projects\*(C'\fR command:
.PP
.Vb 2
\&    #!sh
\&    bif list projects my.org
.Ve
.SS "Importing Projects"
.IX Subsection "Importing Projects"
If you are joining an established team with a pre-existing hub then you
can import any of their projects into your local repository straight
away. The import command has the general form:
.PP
.Vb 1
\&    bif import PATH... HUB
.Ve
.PP
So to import the stable project from the hub located at bifax.org/bif
we run:
.PP
.Vb 2
\&    #!sh
\&    bif import stable bif://bifax.org/bif
.Ve
.PP
Importing a project is a one-time activity. Updates to a project that
occur after an import are exchanged with the \f(CW\*(C`sync\*(C'\fR command (described
below).
.SS "Exporting Projects"
.IX Subsection "Exporting Projects"
The inverse of \f(CW\*(C`import\*(C'\fR is \f(CW\*(C`export\*(C'\fR which has the same general form:
.PP
.Vb 1
\&    bif export PATH... HUB
.Ve
.PP
So to mirror the todo project from the local repository to the hub
located at bif@bifax.org (which we registered as \*(L"bif\*(R") we run this:
.PP
.Vb 2
\&    #!sh
\&    bif export todo bif@bifax.org
.Ve
.PP
As with importing, doing an export is a one-off activity; further
updates are exchanged with the \f(CW\*(C`sync\*(C'\fR command.
.SS "Synchronising Updates"
.IX Subsection "Synchronising Updates"
Even after you have imported or exported a project, updates will not be
exchanged until you run the \f(CW\*(C`sync\*(C'\fR command.
.PP
.Vb 1
\&    bif sync [ID] [HUB]
.Ve
.PP
By default all topics will be synchronised to all relevant hubs, but
you can limit that as desired.
.PP
.Vb 2
\&    #!sh
\&    bif sync unstable   # ignore all other projects
.Ve
.PP
[\s-1TODO:\s0 describe the merge algorithm for meta data]
.SS "Inter-Project Cooperation"
.IX Subsection "Inter-Project Cooperation"
\fICollaborating Internally on Issues\fR
.IX Subsection "Collaborating Internally on Issues"
.PP
An issue is not necessarily only associated with just one project.
Consider what happens when a software team makes a new stable release
from their development version. This is effectively an internal fork \-
a new project that kicks off as the first project continues along the
same path. At the time of the fork both projects will have exactly the
same set of issues. From that point on the issue status may diverge
based on project activities, but the issues they have in common have
themselves not inherently changed.
.PP
The \f(CW\*(C`new project\*(C'\fR command lets us deal with the above situation. The
\&\f(CW\*(C`\-\-fork\*(C'\fR option can be used to define an existing project from which
the new projects issues will be derived from.
.PP
.Vb 2
\&    #!sh
\&    bif new project v2 \-\-fork devel
.Ve
.PP
There are also occasions when an issue reported in a project is
actually in the domain of another project, possibily managed via a
different organisation (and therefore a different hub).  This can
happen when a project has external dependencies, also seen regularly
with software.
.PP
Bif therefore has the ability to manually copy/link an issue to other
projects. In contrast to a one-off copy/duplicate however, comments
made on the issue in one project will propagate to the other projects,
as if there was only a single issue, which is in fact the case. The
\&\f(CW\*(C`push\*(C'\fR command is the way to ask another project for support on a
particular issue:
.PP
.Vb 1
\&    bif push ID PATH [HUB]
.Ve
.PP
The \f(CW\*(C`push\*(C'\fR command asks for (or can be given) an update message the
same way that the \f(CW\*(C`update\*(C'\fR command does:
.PP
.Vb 2
\&    #!sh
\&    bif push 13 todo2 \-\-message "Can you help us with this?"
.Ve
.PP
As was mentioned in the introduction, issue status are tracked on a
per-project basis.  That means one project can consider the issue
solved, and another project can still consider the issue to be
blocking. The \f(CW\*(C`show\*(C'\fR command reveals the details.
.PP
\fICollaborating Externally on Issues\fR
.IX Subsection "Collaborating Externally on Issues"
.PP
You probably noticed above that the \f(CW\*(C`push\*(C'\fR command also takes a \f(CW\*(C`HUB\*(C'\fR
argument.  Bif makes it possible under certain conditions to push an
issue to non-local projects hosted on a hub.
.PP
.Vb 2
\&    #!sh
\&    bif push 16 project3 other.hub
.Ve
.PP
This command is local \- the change will be propagated during the next
\&\f(CW\*(C`sync\*(C'\fR call.
.PP
\fITask Collaboration?!?\fR
.IX Subsection "Task Collaboration?!?"
.PP
It does not make sense to distribute tasks across projects the same way
issues can be. A single task cannot have multiple status: it is either
done or it is not, regardless of which projects are interested in the
outcome.
.PP
There are however reasons for migrating tasks from one project to
another. The obvious one is simply that they can be defined (by
accident or circumstance) in the wrong place. The default \f(CW\*(C`push\*(C'\fR
action on a task therefore results in a \fImove\fR.
.PP
Alternatively the \f(CW\*(C`\-\-copy\*(C'\fR option to \f(CW\*(C`push\*(C'\fR does what it says on the
label, which can be useful if you have a template task in a project
that you regularly want to use in other projects. Once again however,
\&\f(CW\*(C`new project\*(C'\fR probably has more interesting mechanisms for copying
template-style projects.
.PP
How projects may track the outcome of a remote task with bif is still
to be determined.
.SS "Administration"
.IX Subsection "Administration"
New versions of bif will necessarily require changes to the database
structure, and possibly the data itself. The \f(CW\*(C`upgrade\*(C'\fR command exists
to advance the database status to match that required by the bif
software version. It is safe (but pointless) to run \f(CW\*(C`upgrade\*(C'\fR when the
versions already match. When and how this command is run should be
described in the release notes of newer versions of bif.
.PP
One other command which is more about the repository than project
management is \f(CW\*(C`sql\*(C'\fR. This is more of a developer or debugging aide for
querying the database directly. This is needed as the bif software
architecture prevents the SQLite command-line tool \f(CW\*(C`sqlite3\*(C'\fR from
working for some statements.
.SH "FILES"
.IX Header "FILES"
.IP "\fI.bif/config\fR" 4
.IX Item ".bif/config"
Per-repository configuration file.
.IP "\fI.bif/db.sqlite3\fR" 4
.IX Item ".bif/db.sqlite3"
Per-repository SQLite database.
.ie n .IP "\fI\fI$HOME\fI/.config/bif\-user/config\fR" 4
.el .IP "\fI\f(CI$HOME\fI/.config/bif\-user/config\fR" 4
.IX Item "$HOME/.config/bif-user/config"
Global configuration file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
bifhub(1), bifsync(1)
.SH "SUPPORT"
.IX Header "SUPPORT"
Bif is community supported software, and the community expects (and
should offer) respectful communication with all of its members.
.IP "Website:" 4
.IX Item "Website:"
<http://bifax.org/bif/>
.IP "User Mailing List:" 4
.IX Item "User Mailing List:"
Doesn't exist yet.
.PP
If you have an issue with bif please first make the effort to read the
documentation and/or search for an answer to your issue in the
internet. If you are still stuck send us a message as if you were
answering the following questions:
.IP "\(bu" 4
What does \f(CW\*(C`bif show VERSION\*(C'\fR print?
.IP "\(bu" 4
What are you trying to achieve?
.IP "\(bu" 4
What (output) did you expect (to see)?
.IP "\(bu" 4
What (output) actually occured?
.PP
We will most likely need to ask for more information from you. You can
probably speed things along by already running your commands with the
\&\f(CW\*(C`\-\-debug\*(C'\fR flag turned on.
.SH "DEVELOPMENT"
.IX Header "DEVELOPMENT"
.IP "Development Mailing List:" 4
.IX Item "Development Mailing List:"
Subscribe via <http://www.freelists.org/list/bif\-devel> and then send
mail to <bif\-devel@freelists.org>.
.IP "Issue Tracker:" 4
.IX Item "Issue Tracker:"
Doesn't exit yet.
.IP "Code Repository:" 4
.IX Item "Code Repository:"
git://bifax.org/bif.git/
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2013\-2014 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
