.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bif::DB 3"
.TH Bif::DB 3 "2014-04-17" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bif::DB \- helper methods for a read\-only bif database
.SH "VERSION"
.IX Header "VERSION"
0.1.0_10 (2014\-04\-17)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Bif::DB;
\&
\&    # Bif::DB inherits from DBIx::ThinSQL, which inherits from DBI.
\&    my $db = Bif::DB\->connect( $dsn );
\&
\&    # Read only operations on a bif database:
\&    my $id = $db\->uuid2id( $uuid );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBBif::DB\fR is a \s-1DBI\s0 derivative that provides various read-only
methods for retrieving information from a bif repository. For a
read-write equivalent see Bif::DB::RW. The read-only and read-write
parts are separated for performance reasons.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "uuid2id( $UUID ) \-> Int | Undef" 4
.el .IP "uuid2id( \f(CW$UUID\fR ) \-> Int | Undef" 4
.IX Item "uuid2id( $UUID ) -> Int | Undef"
Returns the integer \s-1ID\s0 matching a topic \f(CW$UUID\fR, or \f(CW\*(C`undef\*(C'\fR if no
match is found.
.ie n .IP "get_topic( $ID ) \-> HashRef" 4
.el .IP "get_topic( \f(CW$ID\fR ) \-> HashRef" 4
.IX Item "get_topic( $ID ) -> HashRef"
Looks up the topic identified by \f(CW$ID\fR and returns undef or a hash
reference containg the following keys:
.RS 4
.IP "\(bu" 4
id \- the topic \s-1ID\s0
.IP "\(bu" 4
first_update_id \- the update_id that created the topic
.IP "\(bu" 4
kind \- the type of the topic
.IP "\(bu" 4
uuid \- the universally unique identifier of the topic
.RE
.RS 4
.Sp
If \f(CW$ID\fR has a length of 40 characters the search will be performed on
the basis that it is a \s-1UUID.\s0
.Sp
If the found topic is an issue then the following keys will also
contain valid values:
.IP "\(bu" 4
project_issue_id \- the project-specific topic \s-1ID\s0
.IP "\(bu" 4
project_id \- the project \s-1ID\s0 matching the project_issue_id
.RE
.RS 4
.RE
.ie n .IP "get_update( ""$ID.$UPDATE_ID"" ) \-> HashRef" 4
.el .IP "get_update( ``$ID.$UPDATE_ID'' ) \-> HashRef" 4
.IX Item "get_update( $ID.$UPDATE_ID ) -> HashRef"
Looks up the update identified by \f(CW\*(C`$ID.$UPDATE_ID\*(C'\fR and returns undef
or a hash reference containg the following keys:
.RS 4
.IP "\(bu" 4
id \- the topic \s-1ID\s0
.IP "\(bu" 4
update_id \- the \s-1ID\s0 of the update
.IP "\(bu" 4
kind \- the type of the topic
.IP "\(bu" 4
uuid \- the universally unique identifier of the topic
.RE
.RS 4
.Sp
If the update relates to an issue then the following keys will also
contain valid values:
.IP "\(bu" 4
project_issue_id \- the project-specific topic \s-1ID\s0
.IP "\(bu" 4
project_id \- the project \s-1ID\s0 matching the project_issue_id
.RE
.RS 4
.RE
.IP "get_local_repo_id \-> Int" 4
.IX Item "get_local_repo_id -> Int"
Returns the \s-1ID\s0 for the local repository topic.
.ie n .IP "get_projects( $PATH, [$ALIAS] ) \-> HashRef" 4
.el .IP "get_projects( \f(CW$PATH\fR, [$ALIAS] ) \-> HashRef" 4
.IX Item "get_projects( $PATH, [$ALIAS] ) -> HashRef"
Looks up the project(s) identified by \f(CW$PATH\fR (and optionally a hub
\&\f(CW$ALIAS\fR) returns undef, or a lits of hash references containg the
following keys:
.RS 4
.IP "\(bu" 4
id \- the topic \s-1ID\s0
.IP "\(bu" 4
first_update_id \- the update_id that created the topic
.IP "\(bu" 4
kind \- the type of the topic
.IP "\(bu" 4
uuid \- the universally unique identifier of the topic
.IP "\(bu" 4
path \- the path of the project
.IP "\(bu" 4
parent_id \- the parent \s-1ID\s0 of the project
.IP "\(bu" 4
local \- true if the project is locally synchronized
.RE
.RS 4
.RE
.ie n .IP "status_ids( $project_id, $kind, @status ) \-> \e@ids, \e@invalid" 4
.el .IP "status_ids( \f(CW$project_id\fR, \f(CW$kind\fR, \f(CW@status\fR ) \-> \e@ids, \e@invalid" 4
.IX Item "status_ids( $project_id, $kind, @status ) -> @ids, @invalid"
Takes a project \s-1ID,\s0 a thread type (task, issue, etc) and a list of
status names and returns an arrayref of matching IDs, and an arrayref
of invalid names. This method will silently ignore any \f(CW@status\fR which
are undefined.
.ie n .IP "get_repo_locations( $alias ) \-> @HashRef" 4
.el .IP "get_repo_locations( \f(CW$alias\fR ) \-> \f(CW@HashRef\fR" 4
.IX Item "get_repo_locations( $alias ) -> @HashRef"
Returns a list of \s-1HASH\s0 references containing information about the hub
identified by \f(CW$alias\fR, each with the following keys:
.RS 4
.IP "\(bu" 4
id \- the topic \s-1ID\s0 for the hub
.IP "\(bu" 4
alias \- the alias for the hub
.IP "\(bu" 4
location \- the location of the hub
.IP "\(bu" 4
is_default \- true if it is the default location
.RE
.RS 4
.Sp
Returns \f(CW\*(C`undef\*(C'\fR if \f(CW$alias\fR is not found.
.RE
.IP "get_max_update_id" 4
.IX Item "get_max_update_id"
Returns the maximum update \s-1ID\s0 in the database.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bif::DB::RW
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2013\-2014 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
