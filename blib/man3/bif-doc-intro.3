.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "bif-doc-intro 3"
.TH bif-doc-intro 3 "2014-04-17" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "A Short Introduction To Bif"
.IX Header "A Short Introduction To Bif"
This is a very quick, very hands-on introduction to the bif project
management tool.  The examples given here are based on project
management situations typically encountered by software developers.  It
is assumed that you are comfortable working with command line programs
and your operating system shell (e.g. bash).
.PP
For a more thorough approach see the bif manual.  The documentation
index can be found in bif-doc-index.
.SH "Version"
.IX Header "Version"
0.1.0_10 (2014\-04\-17)
.SH "Initialize a repository"
.IX Header "Initialize a repository"
A repository must be initialized before you can create any topics:
.PP
.Vb 2
\&    #!sh
\&    bif init
.Ve
.PP
The first time you run this you will be asked for your email address
and name.
.SH "Create, List And Modify Topics"
.IX Header "Create, List And Modify Topics"
Create a project, identified by a name and a title. You will also be
prompted to add an initial update message.
.PP
.Vb 2
\&    #!sh
\&    bif new project todo Things to do
.Ve
.PP
Create some tasks and issues. Use the \f(CW\*(C`\-\-message|\-m\*(C'\fR option to prevent
your \f(CW$EDITOR\fR from being invoked.
.PP
.Vb 3
\&    #!sh
\&    bif new task Take out the rubbish
\&    bif new issue I need more spare time \-m "meh!"
.Ve
.PP
Retrieve the lists of things you have created:
.PP
.Vb 3
\&    #!sh
\&    bif list projects
\&    bif list topics
.Ve
.PP
Change the status of some things using the \f(CW\*(C`update\*(C'\fR command, but first
you might want to know which status types are valid:
.PP
.Vb 3
\&    #!sh
\&    bif list task\-status
\&    bif update 16 closed
.Ve
.PP
View the history of changes to a particular topic:
.PP
.Vb 2
\&    #!
\&    bif log 16
.Ve
.PP
Not giving an \s-1ID\s0 argument to \f(CW\*(C`log\*(C'\fR will display the entire history of
the repository.
.SH "Share An Issue Between Two Projects"
.IX Header "Share An Issue Between Two Projects"
.Vb 3
\&    #!sh
\&    bif new project other Someone elses problem
\&    bif push 17 other
.Ve
.PP
But recognise that their status can be individually modified:
.PP
.Vb 2
\&    #!sh
\&    bif update 45 closed
.Ve
.PP
So how do we see all the current statuses of an issue?
.PP
.Vb 1
\&    bif show 45
.Ve
.SH "Fork An Existing Project"
.IX Header "Fork An Existing Project"
Say you are managing a software project, and you are releasing a new
version but are also continuing to work on your development branch.
Rather than having to push each issue separately from the old project
to the new we can just fork the old one.
.PP
.Vb 2
\&    #!sh
\&    bif new project v2 \-\-fork devel
.Ve
.PP
And notice that the new project has exactly the same issues as the
original:
.PP
.Vb 2
\&    #!sh
\&    bif list topics
.Ve
.SH "Collaborating With Others"
.IX Header "Collaborating With Others"
Need to register with an organisation's hub somewhere, and may as well
give the hub an alias while you are at it:
.PP
.Vb 2
\&    #!sh
\&    bif register organisation@hub.com \-\-alias org
.Ve
.PP
Then, most likely, someone else already created the project, and you
just want to work on it too:
.PP
.Vb 3
\&    #!sh
\&    bif import todo org
\&    bif list projects
.Ve
.PP
Then to exchange updates you make and get updates others have made,
just call \f(CW\*(C`sync\*(C'\fR:
.PP
.Vb 2
\&    #!sh
\&    bif sync
.Ve
.SH "See Also"
.IX Header "See Also"
bif(1), bif-doc-faq(1), bif-doc-index(1)
.SH "Author"
.IX Header "Author"
Mark Lawrence <nomad@null.net>
.SH "Copyright and License"
.IX Header "Copyright and License"
Copyright 2013\-2014 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
