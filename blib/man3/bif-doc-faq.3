.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "bif-doc-faq 3"
.TH bif-doc-faq 3 "2014-04-16" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Bif Frequently Asked Questions"
.IX Header "Bif Frequently Asked Questions"
.SS "General"
.IX Subsection "General"
\fIWhat kind of questions go in here?\fR
.IX Subsection "What kind of questions go in here?"
.PP
Anything related to bif of course.
.PP
\fIWhat kind of other questions go in here?\fR
.IX Subsection "What kind of other questions go in here?"
.PP
I'm just filling space here to see what this looks like.
.SS "Not so General"
.IX Subsection "Not so General"
\fIWhat kind of other questions go in here?\fR
.IX Subsection "What kind of other questions go in here?"
.PP
I'm just filling space here to see what this looks like.
.PP
\fIWhat kind of questions go in here?\fR
.IX Subsection "What kind of questions go in here?"
.PP
Anything related to bif of course.
.PP
\fIWhat kind of other questions go in here?\fR
.IX Subsection "What kind of other questions go in here?"
.PP
I'm just filling space here to see what this looks like.
.PP
\fIWhat kind of questions go in here?\fR
.IX Subsection "What kind of questions go in here?"
.PP
Anything related to bif of course.
.SS "Bif Deployment Models"
.IX Subsection "Bif Deployment Models"
\fIHow does my organisation work with a downstream/upstream project?\fR
.IX Subsection "How does my organisation work with a downstream/upstream project?"
.PP
Say for example there are two organisations: downstream and upstream.
The downstream project manager might want to send a \f(CW\*(C`bifhub link\*(C'\fR
request to the upstream hub asking for collaboration permission:
.PP
.Vb 3
\&    #!sh
\&    # Downstream project manager
\&    bifhub link downstream upstream.org@provider.com [upstream]
.Ve
.PP
If upstream agrees to link with your project, their project manager
will link back, reversing the arguments:
.PP
.Vb 3
\&    #!sh
\&    # Upstream project manager
\&    bifhub link upstream downstream.org@provider.com downstream
.Ve
.PP
Bif doesn't actually make a distinction between upstream/downstream so
the two examples above could occur in reverse (chronological) order if
upstream decided to work with downstream first.
.PP
When the users of either project next perform a \f(CW\*(C`bif sync\*(C'\fR, the list
of projects from the other project will be imported. You can view them
using the \*(L"bif list projects\*(R" command:
.PP
.Vb 6
\&    #!sh
\&    bif list projects upstream
\&    # Hub       Project  Title
\&    # \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    # upstream  stable   The stable project
\&    # upstream  devel    The devel project
.Ve
.PP
Note that these are shallow imports, in that only the projects and
their status types are copied, and not their issues and/or tasks.
Afterwards, downstream can push issues upstream like so:
.PP
.Vb 3
\&    #!sh
\&    # Downstream project user
\&    bif push 34 project upstream
.Ve
.PP
Be aware that this is a two way collaboration \- upstream can also push
issues downstream if they wish! I'll leave it up to the reader to think
of the use cases for that.
