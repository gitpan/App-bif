.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::bif::Context 3"
.TH App::bif::Context 3 "2014-04-17" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::bif::Context \- A context class for App::bif::* commands
.SH "VERSION"
.IX Header "VERSION"
0.1.0_10 (2014\-04\-17)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # In App/bif/command/name.pm
\&    use strict;
\&    use warnings;
\&    use App::bif::Context;
\&
\&    sub run {
\&        my $ctx  = App::bif::Context\->new(shift);
\&        my $db   = $ctx\->db;
\&        my $data = $db\->xarray(...);
\&
\&        return $ctx\->err( \*(AqSomeFailure\*(Aq, \*(Aqsomething failed\*(Aq )
\&          if ($ctx\->{command_option});
\&
\&        $ctx\->start_pager;
\&
\&        print $ctx\->render_table(
\&            \*(Aq r  l  l \*(Aq,
\&            [qw/ ID Title Status /],
\&            $data, 
\&        );
\&
\&        $ctx\->end_pager;
\&
\&        return $ctx\->ok(\*(AqCommandName\*(Aq);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBApp::bif::Context\fR provides a context/configuration object for bif
commands. It is a blessed hashref, and commands are expected to grab
configuration keys and call methods on it.
.PP
The above synopsis is the basic template for any bif command. At run
time the \f(CW\*(C`run\*(C'\fR function is called by \f(CW\*(C`OptArgs::dispatch\*(C'\fR with the
options hashref as the first argument. The first thing the bif command
should do it call \f(CW\*(C`App::bif::Context\-\*(C'\fRnew> to set up a bif context
which sets up logging and merges the user and repository configurations
with the command-line options.
.PP
The following utility functions are all automatically exported into the
calling package.  \fBApp::bif::Context\fR sets the encoding of \f(CW\*(C`STDOUT\*(C'\fR
and \f(CW\*(C`STDIN\*(C'\fR to utf\-8 when it is loaded.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP "App::bif::Context\->new( $ctx ) \-> $ctx" 4
.el .IP "App::bif::Context\->new( \f(CW$ctx\fR ) \-> \f(CW$ctx\fR" 4
.IX Item "App::bif::Context->new( $ctx ) -> $ctx"
Initializes the common elements of all bif scripts. Requires the
options hashref as provided by OptArgs but also returns it.
.RS 4
.IP "\(bu" 4
Sets the package variable \f(CW$App::bif::Context::STDOUT_TERMINAL\fR to
true if \f(CW\*(C`STDOUT\*(C'\fR is connected to a terminal.
.IP "\(bu" 4
Sets the environment variable \f(CW\*(C`ANSI_COLORS_DISABLED\*(C'\fR to
1 if \f(CW\*(C`STDOUT\*(C'\fR is \fInot\fR connected to a terminal, in order to disable
Term::ANSIColor functions.
.IP "\(bu" 4
Starts a pager if \f(CW\*(C`\-\-debug\*(C'\fR is true, unless \f(CW\*(C`\-\-no\-pager\*(C'\fR is
also set to true or \f(CW\*(C`STDOUT\*(C'\fR is not connected to a terminal.
.IP "\(bu" 4
Adds unfiltered logging via Log::Any::Adapter::Stdout.
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "err( $err, $message, [ @args ])" 4
.el .IP "err( \f(CW$err\fR, \f(CW$message\fR, [ \f(CW@args\fR ])" 4
.IX Item "err( $err, $message, [ @args ])"
Throws an exception that stringifies to \f(CW$message\fR prefixed with
\&\*(L"fatal: \*(R". The exception is an object from the \f(CW\*(C`Bif::Error::$err\*(C'\fR
class which is used by test scripts to reliably detect the type of
error. If \f(CW@args\fR exists then \f(CW$message\fR is assumed to be a format
string to be converted with sprintf.
.ie n .IP "ok( $type, [ $arg ])" 4
.el .IP "ok( \f(CW$type\fR, [ \f(CW$arg\fR ])" 4
.IX Item "ok( $type, [ $arg ])"
Returns a \f(CW\*(C`Bif::OK::$type\*(C'\fR object, either as a reference to \f(CW$arg\fR or
as a reference to the class name. Every App::bif::* command should
return such an object, which can be tested for by tests.
.ie n .IP "start_pager([ $rows ])" 4
.el .IP "start_pager([ \f(CW$rows\fR ])" 4
.IX Item "start_pager([ $rows ])"
Start a pager (less, more, etc) on \s-1STDOUT\s0 using IO::Pager, provided
that \f(CW\*(C`\-\-no\-pager\*(C'\fR has not been used. The pager handle encoding is set
to utf\-8. If the optional \f(CW$rows\fR has been given then the pager will
only be started if Term::Size reports the height of the terminal as
being less than \f(CW$rows\fR.
.IP "end_pager" 4
.IX Item "end_pager"
Stops the pager on \s-1STDOUT\s0 if it was previously started.
.IP "repo \-> Path::Tiny" 4
.IX Item "repo -> Path::Tiny"
Return the path to the first '.bif' directory found starting from the
current working directory and searching upwards. Raises a
\&'RepoNotFound' error on failure.
.IP "db \-> Bif::DB::db" 4
.IX Item "db -> Bif::DB::db"
Returns a handle for the SQLite database in the current respository (as
found by \f(CW\*(C`bif_repo\*(C'\fR). The handle is only good for read operations \-
use \f(CW\*(C`$ctx\-\*(C'\fRdbw> when inserting,updating or deleting from the database.
.Sp
You should manually import any DBIx::ThinSQL functions you need only
after calling \f(CW\*(C`bif_db\*(C'\fR, in order to keep startup time short for cases
such as when the repository is not found.
.IP "dbw \-> Bif::DB::RW::db" 4
.IX Item "dbw -> Bif::DB::RW::db"
Returns a handle for the SQLite database in the current respository (as
found by \f(CW\*(C`bif_repo\*(C'\fR). The handle is good for \s-1INSERT, UPDATE\s0 and \s-1DELETE\s0
operations.
.Sp
You should manually import any DBIx::ThinSQL functions you need only
after calling \f(CW\*(C`$ctx\-\*(C'\fRdbw>, in order to keep startup time short for
cases such as when the repository is not found.
.ie n .IP "get_project( $path, [ $hub ]) \-> HashRef" 4
.el .IP "get_project( \f(CW$path\fR, [ \f(CW$hub\fR ]) \-> HashRef" 4
.IX Item "get_project( $path, [ $hub ]) -> HashRef"
Calls \f(CW\*(C`get_projects\*(C'\fR from \f(CW\*(C`Bif::DB\*(C'\fR and raises an error if more than
one project is found. Otherwise it passes back the the single hashref
returned.
.ie n .IP "render_table( $format, \e@header, \e@data, [ $indent ] ) \-> Str" 4
.el .IP "render_table( \f(CW$format\fR, \e@header, \e@data, [ \f(CW$indent\fR ] ) \-> Str" 4
.IX Item "render_table( $format, @header, @data, [ $indent ] ) -> Str"
Uses Text::FormatTable to construct a table of <@data>, aligned and
spaced according to \f(CW$format\fR, preceded by a \f(CW@header\fR. If \f(CW$indent\fR
is greater than zero then the entire table is indented by that number
of spaces.
.ie n .IP "prompt_edit( %options ) \-> Str" 4
.el .IP "prompt_edit( \f(CW%options\fR ) \-> Str" 4
.IX Item "prompt_edit( %options ) -> Str"
If the environment is interactive this function will invoke an editor
and return the result. All comment lines (beginning with '#') are
removed. \s-1TODO:\s0 describe \f(CW%options\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bif::DB, Bif::DB::RW
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2013\-2014 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
